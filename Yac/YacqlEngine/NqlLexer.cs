//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Nql.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class NqlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		NAME=10, NUMBER=11, WS=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"NAME", "NUMBER", "WS"
	};


	public NqlLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public NqlLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'player:'", "'stats'", "'where'", "'and'", "'='", "'>'", "'<'", 
		"'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "NAME", "NUMBER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NqlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,78,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
		1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,4,9,63,8,9,11,9,12,
		9,64,1,10,4,10,68,8,10,11,10,12,10,69,1,11,4,11,73,8,11,11,11,12,11,74,
		1,11,1,11,0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,1,0,3,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,80,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,1,25,1,0,0,0,3,33,1,0,0,0,5,39,1,0,0,0,7,45,1,0,0,0,9,49,1,0,0,
		0,11,51,1,0,0,0,13,53,1,0,0,0,15,55,1,0,0,0,17,58,1,0,0,0,19,62,1,0,0,
		0,21,67,1,0,0,0,23,72,1,0,0,0,25,26,5,112,0,0,26,27,5,108,0,0,27,28,5,
		97,0,0,28,29,5,121,0,0,29,30,5,101,0,0,30,31,5,114,0,0,31,32,5,58,0,0,
		32,2,1,0,0,0,33,34,5,115,0,0,34,35,5,116,0,0,35,36,5,97,0,0,36,37,5,116,
		0,0,37,38,5,115,0,0,38,4,1,0,0,0,39,40,5,119,0,0,40,41,5,104,0,0,41,42,
		5,101,0,0,42,43,5,114,0,0,43,44,5,101,0,0,44,6,1,0,0,0,45,46,5,97,0,0,
		46,47,5,110,0,0,47,48,5,100,0,0,48,8,1,0,0,0,49,50,5,61,0,0,50,10,1,0,
		0,0,51,52,5,62,0,0,52,12,1,0,0,0,53,54,5,60,0,0,54,14,1,0,0,0,55,56,5,
		62,0,0,56,57,5,61,0,0,57,16,1,0,0,0,58,59,5,60,0,0,59,60,5,61,0,0,60,18,
		1,0,0,0,61,63,7,0,0,0,62,61,1,0,0,0,63,64,1,0,0,0,64,62,1,0,0,0,64,65,
		1,0,0,0,65,20,1,0,0,0,66,68,7,1,0,0,67,66,1,0,0,0,68,69,1,0,0,0,69,67,
		1,0,0,0,69,70,1,0,0,0,70,22,1,0,0,0,71,73,7,2,0,0,72,71,1,0,0,0,73,74,
		1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,76,1,0,0,0,76,77,6,11,0,0,77,24,
		1,0,0,0,4,0,64,69,74,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
