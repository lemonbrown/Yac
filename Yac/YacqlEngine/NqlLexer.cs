//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Nql.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class NqlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, NAME=21, NUMBER=22, STRING=23, WS=24;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "NAME", "NUMBER", "STRING", "WS"
	};


	public NqlLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public NqlLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'player:'", "'stats'", "'team:'", "'teams'", "'games'", "'seasons'", 
		"','", "'total'", "'avg'", "'most'", "'least'", "'count'", "'by'", "'where'", 
		"'and'", "'='", "'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "NAME", "NUMBER", 
		"STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NqlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,24,169,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
		1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,
		7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,
		1,19,1,19,1,19,1,20,4,20,145,8,20,11,20,12,20,146,1,21,4,21,150,8,21,11,
		21,12,21,151,1,22,1,22,5,22,156,8,22,10,22,12,22,159,9,22,1,22,1,22,1,
		23,4,23,164,8,23,11,23,12,23,165,1,23,1,23,0,0,24,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
		18,37,19,39,20,41,21,43,22,45,23,47,24,1,0,4,4,0,48,57,65,90,95,95,97,
		122,1,0,48,57,3,0,10,10,13,13,39,39,3,0,9,10,13,13,32,32,172,0,1,1,0,0,
		0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
		0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
		0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,1,49,1,0,0,0,3,57,1,0,0,0,5,63,1,0,0,0,7,69,1,0,0,0,9,75,
		1,0,0,0,11,81,1,0,0,0,13,89,1,0,0,0,15,91,1,0,0,0,17,97,1,0,0,0,19,101,
		1,0,0,0,21,106,1,0,0,0,23,112,1,0,0,0,25,118,1,0,0,0,27,121,1,0,0,0,29,
		127,1,0,0,0,31,131,1,0,0,0,33,133,1,0,0,0,35,135,1,0,0,0,37,137,1,0,0,
		0,39,140,1,0,0,0,41,144,1,0,0,0,43,149,1,0,0,0,45,153,1,0,0,0,47,163,1,
		0,0,0,49,50,5,112,0,0,50,51,5,108,0,0,51,52,5,97,0,0,52,53,5,121,0,0,53,
		54,5,101,0,0,54,55,5,114,0,0,55,56,5,58,0,0,56,2,1,0,0,0,57,58,5,115,0,
		0,58,59,5,116,0,0,59,60,5,97,0,0,60,61,5,116,0,0,61,62,5,115,0,0,62,4,
		1,0,0,0,63,64,5,116,0,0,64,65,5,101,0,0,65,66,5,97,0,0,66,67,5,109,0,0,
		67,68,5,58,0,0,68,6,1,0,0,0,69,70,5,116,0,0,70,71,5,101,0,0,71,72,5,97,
		0,0,72,73,5,109,0,0,73,74,5,115,0,0,74,8,1,0,0,0,75,76,5,103,0,0,76,77,
		5,97,0,0,77,78,5,109,0,0,78,79,5,101,0,0,79,80,5,115,0,0,80,10,1,0,0,0,
		81,82,5,115,0,0,82,83,5,101,0,0,83,84,5,97,0,0,84,85,5,115,0,0,85,86,5,
		111,0,0,86,87,5,110,0,0,87,88,5,115,0,0,88,12,1,0,0,0,89,90,5,44,0,0,90,
		14,1,0,0,0,91,92,5,116,0,0,92,93,5,111,0,0,93,94,5,116,0,0,94,95,5,97,
		0,0,95,96,5,108,0,0,96,16,1,0,0,0,97,98,5,97,0,0,98,99,5,118,0,0,99,100,
		5,103,0,0,100,18,1,0,0,0,101,102,5,109,0,0,102,103,5,111,0,0,103,104,5,
		115,0,0,104,105,5,116,0,0,105,20,1,0,0,0,106,107,5,108,0,0,107,108,5,101,
		0,0,108,109,5,97,0,0,109,110,5,115,0,0,110,111,5,116,0,0,111,22,1,0,0,
		0,112,113,5,99,0,0,113,114,5,111,0,0,114,115,5,117,0,0,115,116,5,110,0,
		0,116,117,5,116,0,0,117,24,1,0,0,0,118,119,5,98,0,0,119,120,5,121,0,0,
		120,26,1,0,0,0,121,122,5,119,0,0,122,123,5,104,0,0,123,124,5,101,0,0,124,
		125,5,114,0,0,125,126,5,101,0,0,126,28,1,0,0,0,127,128,5,97,0,0,128,129,
		5,110,0,0,129,130,5,100,0,0,130,30,1,0,0,0,131,132,5,61,0,0,132,32,1,0,
		0,0,133,134,5,62,0,0,134,34,1,0,0,0,135,136,5,60,0,0,136,36,1,0,0,0,137,
		138,5,62,0,0,138,139,5,61,0,0,139,38,1,0,0,0,140,141,5,60,0,0,141,142,
		5,61,0,0,142,40,1,0,0,0,143,145,7,0,0,0,144,143,1,0,0,0,145,146,1,0,0,
		0,146,144,1,0,0,0,146,147,1,0,0,0,147,42,1,0,0,0,148,150,7,1,0,0,149,148,
		1,0,0,0,150,151,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,44,1,0,0,0,
		153,157,5,39,0,0,154,156,8,2,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,
		1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,5,39,0,
		0,161,46,1,0,0,0,162,164,7,3,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,
		1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,168,6,23,0,0,168,48,1,0,0,
		0,5,0,146,151,157,165,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
