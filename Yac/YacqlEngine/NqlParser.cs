//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Nql.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class NqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, NAME=21, NUMBER=22, STRING=23, WS=24;
	public const int
		RULE_query = 0, RULE_playerQuery = 1, RULE_teamQuery = 2, RULE_gameQuery = 3, 
		RULE_seasonQuery = 4, RULE_fieldSelection = 5, RULE_field = 6, RULE_groupingClause = 7, 
		RULE_groupingField = 8, RULE_whereClause = 9, RULE_condition = 10, RULE_operator = 11, 
		RULE_value = 12;
	public static readonly string[] ruleNames = {
		"query", "playerQuery", "teamQuery", "gameQuery", "seasonQuery", "fieldSelection", 
		"field", "groupingClause", "groupingField", "whereClause", "condition", 
		"operator", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'player:'", "'stats'", "'team:'", "'teams'", "'games'", "'seasons'", 
		"','", "'total'", "'avg'", "'most'", "'least'", "'count'", "'by'", "'where'", 
		"'and'", "'='", "'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "NAME", "NUMBER", 
		"STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlayerQueryContext playerQuery() {
			return GetRuleContext<PlayerQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamQueryContext teamQuery() {
			return GetRuleContext<TeamQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GameQueryContext gameQuery() {
			return GetRuleContext<GameQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeasonQueryContext seasonQuery() {
			return GetRuleContext<SeasonQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26;
				playerQuery();
				}
				break;
			case T__2:
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 27;
				teamQuery();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 28;
				gameQuery();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 4);
				{
				State = 29;
				seasonQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public PlayerQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterPlayerQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitPlayerQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerQueryContext playerQuery() {
		PlayerQueryContext _localctx = new PlayerQueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_playerQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(T__0);
			State = 33;
			Match(NAME);
			State = 34;
			Match(T__1);
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 35;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldSelectionContext fieldSelection() {
			return GetRuleContext<FieldSelectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingClauseContext groupingClause() {
			return GetRuleContext<GroupingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public TeamQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterTeamQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitTeamQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeamQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeamQueryContext teamQuery() {
		TeamQueryContext _localctx = new TeamQueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_teamQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 38;
				Match(T__2);
				State = 39;
				Match(NAME);
				}
				break;
			case T__3:
				{
				State = 40;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2105088L) != 0)) {
				{
				State = 43;
				fieldSelection();
				}
			}

			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 46;
				groupingClause();
				}
			}

			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 49;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldSelectionContext fieldSelection() {
			return GetRuleContext<FieldSelectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingClauseContext groupingClause() {
			return GetRuleContext<GroupingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public GameQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterGameQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitGameQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGameQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GameQueryContext gameQuery() {
		GameQueryContext _localctx = new GameQueryContext(Context, State);
		EnterRule(_localctx, 6, RULE_gameQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(T__4);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2105088L) != 0)) {
				{
				State = 53;
				fieldSelection();
				}
			}

			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 56;
				groupingClause();
				}
			}

			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 59;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeasonQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldSelectionContext fieldSelection() {
			return GetRuleContext<FieldSelectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingClauseContext groupingClause() {
			return GetRuleContext<GroupingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public SeasonQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seasonQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterSeasonQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitSeasonQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeasonQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeasonQueryContext seasonQuery() {
		SeasonQueryContext _localctx = new SeasonQueryContext(Context, State);
		EnterRule(_localctx, 8, RULE_seasonQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(T__5);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2105088L) != 0)) {
				{
				State = 63;
				fieldSelection();
				}
			}

			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 66;
				groupingClause();
				}
			}

			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 69;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldSelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(NqlParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(NqlParser.WS, i);
		}
		public FieldSelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldSelection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterFieldSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitFieldSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldSelectionContext fieldSelection() {
		FieldSelectionContext _localctx = new FieldSelectionContext(Context, State);
		EnterRule(_localctx, 10, RULE_fieldSelection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			field();
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6 || _la==WS) {
				{
				{
				State = 73;
				_la = TokenStream.LA(1);
				if ( !(_la==T__6 || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 74;
				field();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
	 
		public FieldContext() { }
		public virtual void CopyFrom(FieldContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AggregateFieldContext : FieldContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		public AggregateFieldContext(FieldContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterAggregateField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitAggregateField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameFieldContext : FieldContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		public NameFieldContext(FieldContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterNameField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitNameField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 12, RULE_field);
		int _la;
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
				_localctx = new AggregateFieldContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7936L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 81;
					Match(NAME);
					}
				}

				}
				break;
			case NAME:
				_localctx = new NameFieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingClauseContext : ParserRuleContext {
		public GroupingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingClause; } }
	 
		public GroupingClauseContext() { }
		public virtual void CopyFrom(GroupingClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupFieldContext : GroupingClauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingFieldContext[] groupingField() {
			return GetRuleContexts<GroupingFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingFieldContext groupingField(int i) {
			return GetRuleContext<GroupingFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(NqlParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(NqlParser.WS, i);
		}
		public GroupFieldContext(GroupingClauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterGroupField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitGroupField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingClauseContext groupingClause() {
		GroupingClauseContext _localctx = new GroupingClauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_groupingClause);
		int _la;
		try {
			_localctx = new GroupFieldContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(T__12);
			State = 88;
			groupingField();
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6 || _la==WS) {
				{
				{
				State = 89;
				_la = TokenStream.LA(1);
				if ( !(_la==T__6 || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 90;
				groupingField();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		public GroupingFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterGroupingField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitGroupingField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingFieldContext groupingField() {
		GroupingFieldContext _localctx = new GroupingFieldContext(Context, State);
		EnterRule(_localctx, 16, RULE_groupingField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_whereClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(T__13);
			State = 99;
			condition();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 100;
				Match(T__14);
				State = 101;
				condition();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(NAME);
			State = 108;
			@operator();
			State = 109;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2031616L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(NqlParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NqlParser.STRING, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14680064L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,24,116,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,0,1,0,3,0,
		31,8,0,1,1,1,1,1,1,1,1,3,1,37,8,1,1,2,1,2,1,2,3,2,42,8,2,1,2,3,2,45,8,
		2,1,2,3,2,48,8,2,1,2,3,2,51,8,2,1,3,1,3,3,3,55,8,3,1,3,3,3,58,8,3,1,3,
		3,3,61,8,3,1,4,1,4,3,4,65,8,4,1,4,3,4,68,8,4,1,4,3,4,71,8,4,1,5,1,5,1,
		5,5,5,76,8,5,10,5,12,5,79,9,5,1,6,1,6,3,6,83,8,6,1,6,3,6,86,8,6,1,7,1,
		7,1,7,1,7,5,7,92,8,7,10,7,12,7,95,9,7,1,8,1,8,1,9,1,9,1,9,1,9,5,9,103,
		8,9,10,9,12,9,106,9,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,0,0,
		13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,4,2,0,7,7,24,24,1,0,8,12,1,0,16,
		20,1,0,21,23,121,0,30,1,0,0,0,2,32,1,0,0,0,4,41,1,0,0,0,6,52,1,0,0,0,8,
		62,1,0,0,0,10,72,1,0,0,0,12,85,1,0,0,0,14,87,1,0,0,0,16,96,1,0,0,0,18,
		98,1,0,0,0,20,107,1,0,0,0,22,111,1,0,0,0,24,113,1,0,0,0,26,31,3,2,1,0,
		27,31,3,4,2,0,28,31,3,6,3,0,29,31,3,8,4,0,30,26,1,0,0,0,30,27,1,0,0,0,
		30,28,1,0,0,0,30,29,1,0,0,0,31,1,1,0,0,0,32,33,5,1,0,0,33,34,5,21,0,0,
		34,36,5,2,0,0,35,37,3,18,9,0,36,35,1,0,0,0,36,37,1,0,0,0,37,3,1,0,0,0,
		38,39,5,3,0,0,39,42,5,21,0,0,40,42,5,4,0,0,41,38,1,0,0,0,41,40,1,0,0,0,
		42,44,1,0,0,0,43,45,3,10,5,0,44,43,1,0,0,0,44,45,1,0,0,0,45,47,1,0,0,0,
		46,48,3,14,7,0,47,46,1,0,0,0,47,48,1,0,0,0,48,50,1,0,0,0,49,51,3,18,9,
		0,50,49,1,0,0,0,50,51,1,0,0,0,51,5,1,0,0,0,52,54,5,5,0,0,53,55,3,10,5,
		0,54,53,1,0,0,0,54,55,1,0,0,0,55,57,1,0,0,0,56,58,3,14,7,0,57,56,1,0,0,
		0,57,58,1,0,0,0,58,60,1,0,0,0,59,61,3,18,9,0,60,59,1,0,0,0,60,61,1,0,0,
		0,61,7,1,0,0,0,62,64,5,6,0,0,63,65,3,10,5,0,64,63,1,0,0,0,64,65,1,0,0,
		0,65,67,1,0,0,0,66,68,3,14,7,0,67,66,1,0,0,0,67,68,1,0,0,0,68,70,1,0,0,
		0,69,71,3,18,9,0,70,69,1,0,0,0,70,71,1,0,0,0,71,9,1,0,0,0,72,77,3,12,6,
		0,73,74,7,0,0,0,74,76,3,12,6,0,75,73,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,
		0,77,78,1,0,0,0,78,11,1,0,0,0,79,77,1,0,0,0,80,82,7,1,0,0,81,83,5,21,0,
		0,82,81,1,0,0,0,82,83,1,0,0,0,83,86,1,0,0,0,84,86,5,21,0,0,85,80,1,0,0,
		0,85,84,1,0,0,0,86,13,1,0,0,0,87,88,5,13,0,0,88,93,3,16,8,0,89,90,7,0,
		0,0,90,92,3,16,8,0,91,89,1,0,0,0,92,95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,
		0,0,94,15,1,0,0,0,95,93,1,0,0,0,96,97,5,21,0,0,97,17,1,0,0,0,98,99,5,14,
		0,0,99,104,3,20,10,0,100,101,5,15,0,0,101,103,3,20,10,0,102,100,1,0,0,
		0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,19,1,0,0,0,106,104,
		1,0,0,0,107,108,5,21,0,0,108,109,3,22,11,0,109,110,3,24,12,0,110,21,1,
		0,0,0,111,112,7,2,0,0,112,23,1,0,0,0,113,114,7,3,0,0,114,25,1,0,0,0,17,
		30,36,41,44,47,50,54,57,60,64,67,70,77,82,85,93,104
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
