//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Nql.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class NqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, NAME=19, NUMBER=20, STRING=21, WS=22;
	public const int
		RULE_query = 0, RULE_playerQuery = 1, RULE_teamQuery = 2, RULE_gameQuery = 3, 
		RULE_seasonQuery = 4, RULE_playerList = 5, RULE_teamList = 6, RULE_gameList = 7, 
		RULE_fieldSelection = 8, RULE_field = 9, RULE_whereClause = 10, RULE_condition = 11, 
		RULE_operator = 12, RULE_value = 13;
	public static readonly string[] ruleNames = {
		"query", "playerQuery", "teamQuery", "gameQuery", "seasonQuery", "playerList", 
		"teamList", "gameList", "fieldSelection", "field", "whereClause", "condition", 
		"operator", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'player:'", "'stats'", "'team:'", "'teams'", "'games'", "'seasons'", 
		"','", "'total'", "'avg'", "'most'", "'least'", "'where'", "'and'", "'='", 
		"'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "NAME", "NUMBER", "STRING", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlayerQueryContext playerQuery() {
			return GetRuleContext<PlayerQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamQueryContext teamQuery() {
			return GetRuleContext<TeamQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GameQueryContext gameQuery() {
			return GetRuleContext<GameQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeasonQueryContext seasonQuery() {
			return GetRuleContext<SeasonQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 28;
				playerQuery();
				}
				break;
			case T__2:
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29;
				teamQuery();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 30;
				gameQuery();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 4);
				{
				State = 31;
				seasonQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public PlayerQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterPlayerQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitPlayerQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerQueryContext playerQuery() {
		PlayerQueryContext _localctx = new PlayerQueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_playerQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			Match(T__0);
			State = 35;
			Match(NAME);
			State = 36;
			Match(T__1);
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 37;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldSelectionContext fieldSelection() {
			return GetRuleContext<FieldSelectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public TeamQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterTeamQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitTeamQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeamQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeamQueryContext teamQuery() {
		TeamQueryContext _localctx = new TeamQueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_teamQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 40;
				Match(T__2);
				State = 41;
				Match(NAME);
				}
				break;
			case T__3:
				{
				State = 42;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 528128L) != 0)) {
				{
				State = 45;
				fieldSelection();
				}
			}

			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 48;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public GameQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterGameQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitGameQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGameQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GameQueryContext gameQuery() {
		GameQueryContext _localctx = new GameQueryContext(Context, State);
		EnterRule(_localctx, 6, RULE_gameQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(T__4);
			State = 52;
			whereClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeasonQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldSelectionContext fieldSelection() {
			return GetRuleContext<FieldSelectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public SeasonQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seasonQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterSeasonQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitSeasonQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeasonQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeasonQueryContext seasonQuery() {
		SeasonQueryContext _localctx = new SeasonQueryContext(Context, State);
		EnterRule(_localctx, 8, RULE_seasonQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(T__5);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 528128L) != 0)) {
				{
				State = 55;
				fieldSelection();
				}
			}

			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 58;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(NqlParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(NqlParser.NAME, i);
		}
		public PlayerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterPlayerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitPlayerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayerListContext playerList() {
		PlayerListContext _localctx = new PlayerListContext(Context, State);
		EnterRule(_localctx, 10, RULE_playerList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(NAME);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 62;
				Match(T__6);
				State = 63;
				Match(NAME);
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(NqlParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(NqlParser.NAME, i);
		}
		public TeamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterTeamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitTeamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTeamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TeamListContext teamList() {
		TeamListContext _localctx = new TeamListContext(Context, State);
		EnterRule(_localctx, 12, RULE_teamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(NAME);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 70;
				Match(T__6);
				State = 71;
				Match(NAME);
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(NqlParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(NqlParser.NAME, i);
		}
		public GameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterGameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitGameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GameListContext gameList() {
		GameListContext _localctx = new GameListContext(Context, State);
		EnterRule(_localctx, 14, RULE_gameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(NAME);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 78;
				Match(T__6);
				State = 79;
				Match(NAME);
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldSelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(NqlParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(NqlParser.WS, i);
		}
		public FieldSelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldSelection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterFieldSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitFieldSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldSelectionContext fieldSelection() {
		FieldSelectionContext _localctx = new FieldSelectionContext(Context, State);
		EnterRule(_localctx, 16, RULE_fieldSelection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			field();
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6 || _la==WS) {
				{
				{
				State = 86;
				_la = TokenStream.LA(1);
				if ( !(_la==T__6 || _la==WS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 87;
				field();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
	 
		public FieldContext() { }
		public virtual void CopyFrom(FieldContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AggregateFieldContext : FieldContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		public AggregateFieldContext(FieldContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterAggregateField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitAggregateField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateField(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameFieldContext : FieldContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		public NameFieldContext(FieldContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterNameField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitNameField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 18, RULE_field);
		int _la;
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__8:
			case T__9:
			case T__10:
				_localctx = new AggregateFieldContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 93;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3840L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 94;
				Match(NAME);
				}
				break;
			case NAME:
				_localctx = new NameFieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_whereClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(T__11);
			State = 99;
			condition();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 100;
				Match(T__12);
				State = 101;
				condition();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 22, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(NAME);
			State = 108;
			@operator();
			State = 109;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 24, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 507904L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(NqlParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NqlParser.STRING, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INqlListener typedListener = listener as INqlListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INqlVisitor<TResult> typedVisitor = visitor as INqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,22,116,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,1,
		0,1,0,3,0,33,8,0,1,1,1,1,1,1,1,1,3,1,39,8,1,1,2,1,2,1,2,3,2,44,8,2,1,2,
		3,2,47,8,2,1,2,3,2,50,8,2,1,3,1,3,1,3,1,4,1,4,3,4,57,8,4,1,4,3,4,60,8,
		4,1,5,1,5,1,5,5,5,65,8,5,10,5,12,5,68,9,5,1,6,1,6,1,6,5,6,73,8,6,10,6,
		12,6,76,9,6,1,7,1,7,1,7,5,7,81,8,7,10,7,12,7,84,9,7,1,8,1,8,1,8,5,8,89,
		8,8,10,8,12,8,92,9,8,1,9,1,9,1,9,3,9,97,8,9,1,10,1,10,1,10,1,10,5,10,103,
		8,10,10,10,12,10,106,9,10,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,
		0,0,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,0,4,2,0,7,7,22,22,1,0,8,11,
		1,0,14,18,1,0,19,21,116,0,32,1,0,0,0,2,34,1,0,0,0,4,43,1,0,0,0,6,51,1,
		0,0,0,8,54,1,0,0,0,10,61,1,0,0,0,12,69,1,0,0,0,14,77,1,0,0,0,16,85,1,0,
		0,0,18,96,1,0,0,0,20,98,1,0,0,0,22,107,1,0,0,0,24,111,1,0,0,0,26,113,1,
		0,0,0,28,33,3,2,1,0,29,33,3,4,2,0,30,33,3,6,3,0,31,33,3,8,4,0,32,28,1,
		0,0,0,32,29,1,0,0,0,32,30,1,0,0,0,32,31,1,0,0,0,33,1,1,0,0,0,34,35,5,1,
		0,0,35,36,5,19,0,0,36,38,5,2,0,0,37,39,3,20,10,0,38,37,1,0,0,0,38,39,1,
		0,0,0,39,3,1,0,0,0,40,41,5,3,0,0,41,44,5,19,0,0,42,44,5,4,0,0,43,40,1,
		0,0,0,43,42,1,0,0,0,44,46,1,0,0,0,45,47,3,16,8,0,46,45,1,0,0,0,46,47,1,
		0,0,0,47,49,1,0,0,0,48,50,3,20,10,0,49,48,1,0,0,0,49,50,1,0,0,0,50,5,1,
		0,0,0,51,52,5,5,0,0,52,53,3,20,10,0,53,7,1,0,0,0,54,56,5,6,0,0,55,57,3,
		16,8,0,56,55,1,0,0,0,56,57,1,0,0,0,57,59,1,0,0,0,58,60,3,20,10,0,59,58,
		1,0,0,0,59,60,1,0,0,0,60,9,1,0,0,0,61,66,5,19,0,0,62,63,5,7,0,0,63,65,
		5,19,0,0,64,62,1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,11,
		1,0,0,0,68,66,1,0,0,0,69,74,5,19,0,0,70,71,5,7,0,0,71,73,5,19,0,0,72,70,
		1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,13,1,0,0,0,76,74,
		1,0,0,0,77,82,5,19,0,0,78,79,5,7,0,0,79,81,5,19,0,0,80,78,1,0,0,0,81,84,
		1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,15,1,0,0,0,84,82,1,0,0,0,85,90,
		3,18,9,0,86,87,7,0,0,0,87,89,3,18,9,0,88,86,1,0,0,0,89,92,1,0,0,0,90,88,
		1,0,0,0,90,91,1,0,0,0,91,17,1,0,0,0,92,90,1,0,0,0,93,94,7,1,0,0,94,97,
		5,19,0,0,95,97,5,19,0,0,96,93,1,0,0,0,96,95,1,0,0,0,97,19,1,0,0,0,98,99,
		5,12,0,0,99,104,3,22,11,0,100,101,5,13,0,0,101,103,3,22,11,0,102,100,1,
		0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,21,1,0,0,0,106,
		104,1,0,0,0,107,108,5,19,0,0,108,109,3,24,12,0,109,110,3,26,13,0,110,23,
		1,0,0,0,111,112,7,2,0,0,112,25,1,0,0,0,113,114,7,3,0,0,114,27,1,0,0,0,
		13,32,38,43,46,49,56,59,66,74,82,90,96,104
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
